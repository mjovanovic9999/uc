/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 11.10.2025 18:43:32

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 6544;
#else
constexpr int kTensorArenaSize = 5520;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data1[8] = { -0.98493695259094238, -0.59163910150527954, -0.82543909549713135, -0.65666967630386353, -1.7847884893417358, -0.74719858169555664, -0.88712978363037109, -0.59459590911865234, };
const TfArray<1, int> tensor_dimension1 = { 1, { 8 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data2[16] = { -0.25945830345153809, -0.65435153245925903, -0.2915101945400238, -0.39085370302200317, -0.42642137408256531, 0.086155630648136139, 0.13694089651107788, -0.72723168134689331, -0.51386088132858276, -0.21764002740383148, -0.14562521874904633, 0.40618368983268738, -0.24702589213848114, -0.014474452473223209, -0.52137666940689087, 0.19540755450725555, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 49, 13, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 1, 49, 1, 8, };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 25, 8, };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { 1, 25, 1, 16, };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ -0.3784063458442688,0.36005750298500061,0.55086427927017212,0.057233482599258423,-0.19805189967155457,-0.40167710185050964,0.071031071245670319,0.26778903603553772,-0.27902120351791382,-0.043306753039360046,0.091430939733982086,-0.23130345344543457,0.44184938073158264, -0.56176286935806274,-0.20514567196369171,0.29960078001022339,-0.19522468745708466,-0.077966518700122833,-0.0081293657422065735,-0.02908858098089695,0.27125191688537598,0.013409704901278019,0.18467779457569122,0.012924355454742908,-0.27276161313056946,0.058413617312908173, -0.17637896537780762,-0.43733406066894531,0.069455690681934357,-0.4326842725276947,-0.30027720332145691,-0.41656237840652466,0.028680415824055672,-0.0055870823562145233,-0.098446175456047058,-0.19667129218578339,-0.0066767940297722816,-0.11352794617414474,0.32958269119262695, 
  /* [1][0][][] */ -0.66582769155502319,-0.046824119985103607,0.065066598355770111,0.22579650580883026,-0.17789033055305481,0.28846773505210876,-0.25549647212028503,0.37805077433586121,-0.089163273572921753,0.35176509618759155,0.041838433593511581,-0.29799601435661316,-0.2353350818157196, -0.53707385063171387,-0.11911383271217346,0.032609321177005768,-0.039586815983057022,-0.13877853751182556,0.23791041970252991,-0.055515408515930176,0.24259382486343384,0.010116664692759514,0.34021607041358948,-0.018707539886236191,-0.40962517261505127,-0.12422941625118256, -0.59558308124542236,-0.24940316379070282,-0.2396528422832489,0.21911938488483429,-0.04092741385102272,0.10896827280521393,-0.07873254269361496,0.045771077275276184,-0.13611246645450592,0.35646858811378479,0.22905382513999939,-0.36623901128768921,-0.10072194784879684, 
  /* [2][0][][] */ 0.19132773578166962,0.1183265745639801,0.0059950854629278183,-0.38272053003311157,-0.26948696374893188,-0.0095239635556936264,0.27486330270767212,-0.064145714044570923,0.14497750997543335,-0.24724464118480682,0.29555615782737732,0.19458608329296112,-0.29679074883460999, -0.16829001903533936,0.14691337943077087,0.17076267302036285,-0.29665869474411011,-0.3495233952999115,0.25752142071723938,0.17198272049427032,-0.045139040797948837,0.11920001357793808,-0.45757219195365906,-0.0085135875269770622,0.52724611759185791,-0.38973313570022583, -0.12719954550266266,0.12058679759502411,0.17680424451828003,-0.45487090945243835,-0.21989706158638,0.22378304600715637,0.083780430257320404,-0.48590695858001709,0.41620409488677979,-0.30050212144851685,0.029565295204520226,0.30605855584144592,0.16674372553825378, 
  /* [3][0][][] */ -0.14233563840389252,0.13639894127845764,-0.18492788076400757,-0.2183777391910553,-0.50539606809616089,-0.33726972341537476,0.035436686128377914,-0.24436488747596741,-0.2566521167755127,-0.21470843255519867,-0.20431965589523315,-0.0474129319190979,0.047187790274620056, -0.010579789988696575,0.31658786535263062,0.18495078384876251,0.52208048105239868,0.48850256204605103,0.51905721426010132,0.29118150472640991,0.14144746959209442,0.22592742741107941,0.35914850234985352,0.44943732023239136,0.28685125708580017,0.43164962530136108, 0.34059154987335205,-0.038708202540874481,0.12002472579479218,0.24830128252506256,-0.15520942211151123,0.20412753522396088,0.27209752798080444,0.43404152989387512,0.16757488250732422,0.28477784991264343,0.22276569902896881,-0.045629184693098068,-0.20152647793292999, 
  /* [4][0][][] */ -0.10093986988067627,0.15965551137924194,0.32473698258399963,0.30370402336120605,-0.50074678659439087,-0.36835029721260071,0.10312042385339737,-0.13397052884101868,0.067682459950447083,-0.43107599020004272,-0.083998247981071472,0.12398684024810791,-0.35494962334632874, 0.13781735301017761,0.21040327847003937,0.25505569577217102,-0.057194627821445465,-0.70074516534805298,-0.34033343195915222,0.07891073077917099,0.28380626440048218,-0.072231769561767578,0.11423823982477188,-0.14262653887271881,-0.22102825343608856,-0.26637101173400879, -0.16273273527622223,0.14589181542396545,0.1029197946190834,0.09129130095243454,-0.43253308534622192,-0.21983522176742554,-0.27984198927879333,0.20310100913047791,-0.11507599055767059,-0.021417703479528427,-0.25033310055732727,-0.10184819251298904,-0.22552677989006042, 
  /* [5][0][][] */ -0.34113594889640808,0.37856188416481018,0.22311346232891083,0.73620176315307617,0.045487720519304276,-0.20839269459247589,0.18521030247211456,-0.18349893391132355,-0.093370139598846436,-0.0029424484819173813,-0.030417084693908691,0.19977414608001709,-0.010943038389086723, 0.067567721009254456,0.17687766253948212,0.38097628951072693,0.63258343935012817,0.30699607729911804,0.12967169284820557,0.20905175805091858,-0.139730304479599,-0.18447230756282806,-0.039743814617395401,-0.13929647207260132,0.01937079057097435,-0.52427977323532104, -0.1923556923866272,0.036193717271089554,0.11401738226413727,0.76209002733230591,-0.2520635724067688,0.30997717380523682,0.15084461867809296,-0.067723996937274933,0.25717943906784058,0.016023065894842148,0.18703216314315796,0.057449821382761002,0.21572014689445496, 
  /* [6][0][][] */ 0.34724664688110352,0.46043497323989868,-0.20928496122360229,0.026335388422012329,0.16994957625865936,-0.2829413115978241,-0.08658628910779953,0.089576251804828644,-0.28670060634613037,0.12747578322887421,-0.0080212326720356941,0.44381111860275269,-0.046784419566392899, 0.47390848398208618,0.62949091196060181,-0.20876520872116089,-0.037820372730493546,0.1148378774523735,0.019360918551683426,-0.085769787430763245,0.05358736589550972,-0.17725726962089539,-0.062306992709636688,0.27111390233039856,0.0057331854477524757,-0.17209793627262115, 0.33780112862586975,0.64514946937561035,-0.18231551349163055,-0.10169247537851334,0.31639426946640015,-0.19328898191452026,0.11664887517690659,-0.06635342538356781,-0.030138980597257614,0.36902317404747009,-0.13433454930782318,0.092315562069416046,-0.14538484811782837, 
  /* [7][0][][] */ 0.0022058931645005941,-0.15927697718143463,0.32987800240516663,0.24244783818721771,0.45754680037498474,0.62037360668182373,-0.23388125002384186,0.22695145010948181,0.27750459313392639,0.24555438756942749,-0.022109773010015488,0.071257494390010834,0.21328385174274445, 0.15069559216499329,0.42962780594825745,0.34554615616798401,0.11907874047756195,0.39963072538375854,0.20297273993492126,-0.35649916529655457,-0.032133057713508606,0.24613097310066223,-0.093983769416809082,-0.16546663641929626,0.063508428633213043,-0.32664835453033447, 0.086291193962097168,0.79698318243026733,0.37046471238136292,-0.00041462096851319075,-0.228767991065979,-0.13551038503646851,0.094259671866893768,0.077435418963432312,0.37973019480705261,0.19608904421329498,-0.098249703645706177,-0.16723968088626862,-0.050253946334123611, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 0.031247671693563461,0.077785149216651917,0.26343578100204468,-0.064201615750789642,-0.42330643534660339,-0.37252646684646606,0.24934682250022888,-0.30706670880317688, 0.059461694210767746,0.45739862322807312,-0.15777933597564697,-0.25809651613235474,-0.77903085947036743,-0.4444425106048584,0.36172953248023987,-0.54634147882461548, 0.12980590760707855,-0.015921628102660179,0.40092208981513977,-0.09351290762424469,-0.43070900440216064,-0.49766311049461365,0.025289196521043777,-0.35896977782249451, 
  /* [1][0][][] */ -0.13266837596893311,0.01079211849719286,0.10868167132139206,0.25540074706077576,-0.099226690828800201,-0.32810133695602417,-0.091736331582069397,-0.11314690858125687, -0.10830231755971909,-0.37918952107429504,0.042265240103006363,0.061987627297639847,0.22704604268074036,0.34178352355957031,0.048481263220310211,0.37767836451530457, 0.15385036170482635,-0.3060833215713501,0.3997478187084198,-0.096623755991458893,0.010865639895200729,0.26241013407707214,-0.051315728574991226,-0.036914173513650894, 
  /* [2][0][][] */ 0.19854022562503815,-0.026009006425738335,0.042258512228727341,-0.043508782982826233,-0.37795618176460266,-0.1119992583990097,-0.29317671060562134,0.040554612874984741, 0.31675320863723755,0.025503247976303101,-0.0036082072183489799,-0.075908340513706207,-0.47648805379867554,-0.51947462558746338,-0.25340074300765991,0.84465819597244263, 0.069379888474941254,0.059158015996217728,0.043111681938171387,-0.12498725205659866,-0.1554328054189682,-0.30684638023376465,-0.072689056396484375,-0.098782837390899658, 
  /* [3][0][][] */ 0.026623081415891647,-0.34159216284751892,0.068994857370853424,-0.26886171102523804,0.2169274240732193,-0.10557893663644791,-0.18819177150726318,-0.16723161935806274, 0.019258946180343628,-0.48600402474403381,0.25932714343070984,-0.44899126887321472,-0.2289966493844986,-0.26110237836837769,-0.023433594033122063,0.12568973004817963, -0.063840568065643311,-0.23172494769096375,-0.082488857209682465,-0.34779506921768188,0.74756252765655518,-0.27897679805755615,0.093452908098697662,0.23626129329204559, 
  /* [4][0][][] */ -0.550670325756073,-0.18460765480995178,-0.1306251734495163,-0.2740294337272644,-0.53051477670669556,0.015322419814765453,0.17889682948589325,0.083219051361083984, -0.17160166800022125,-0.067467622458934784,0.18453523516654968,-0.38447967171669006,-0.38152754306793213,0.35591927170753479,0.18398326635360718,-0.080795802175998688, -0.40380337834358215,0.061189625412225723,0.52321970462799072,-0.27301424741744995,-0.502227783203125,0.20915286242961884,-0.089757189154624939,-0.20732252299785614, 
  /* [5][0][][] */ -0.76130372285842896,0.39467796683311462,-0.30930468440055847,-0.052450075745582581,-0.36338508129119873,-0.13210265338420868,-1.4925786256790161,0.11376509070396423, -0.72455364465713501,-0.10880559682846069,-0.29231971502304077,-0.042264543473720551,-0.44847196340560913,-0.20049479603767395,-1.2435302734375,0.022652814164757729, -0.62498533725738525,0.37460282444953918,-0.054014090448617935,-0.022632699459791183,-0.60968202352523804,-0.018356826156377792,-1.284281849861145,-0.088546536862850189, 
  /* [6][0][][] */ 0.23013919591903687,-0.37560448050498962,0.13476535677909851,0.47302618622779846,-0.040600001811981201,-0.032809972763061523,0.041953437030315399,-0.0099873002618551254, -0.0046468181535601616,-0.15371878445148468,-0.035653717815876007,-0.092714622616767883,-0.042593136429786682,-0.16942340135574341,-0.1342388242483139,0.126310795545578, -0.066256083548069,-0.27619224786758423,-0.15170595049858093,0.66875928640365601,-0.27041211724281311,-0.11798939853906631,-0.15338808298110962,-0.14618431031703949, 
  /* [7][0][][] */ -0.082343734800815582,-0.29996731877326965,0.12258904427289963,-0.15681718289852142,-0.204239621758461,0.014201799407601357,0.046848289668560028,-0.32799535989761353, -0.05033455416560173,-0.24572335183620453,-0.045636355876922607,0.14080248773097992,0.91591417789459229,0.10836850106716156,0.10531046986579895,-0.14864335954189301, 0.049323886632919312,-0.34217309951782227,-0.42136102914810181,-0.20106945931911469,0.35004749894142151,-0.017450990155339241,0.088129714131355286,-0.11281877011060715, 
  /* [8][0][][] */ 0.10728121548891068,-0.66665613651275635,-0.035635430365800858,-0.032218553125858307,0.13086763024330139,0.28746515512466431,0.07702820748090744,0.24531981348991394, 0.10638211667537689,-1.1557502746582031,0.12405633181333542,0.24240942299365997,0.25102072954177856,-0.082240626215934753,-0.11693102121353149,0.1714649498462677, -0.19409160315990448,-1.0211718082427979,0.37721455097198486,-0.075541161000728607,0.031036807224154472,0.0048961443826556206,-0.17108704149723053,0.044460859149694443, 
  /* [9][0][][] */ 0.1914011538028717,-0.021128548309206963,0.14677280187606812,0.11841315031051636,-0.17215941846370697,0.014519317075610161,-0.19752006232738495,-0.22312161326408386, -0.18771475553512573,-0.19478382170200348,-0.26706972718238831,0.15311066806316376,-0.30133756995201111,0.17576363682746887,-0.12336729466915131,0.24462705850601196, -0.26719588041305542,-0.12376341968774796,0.54015481472015381,0.19430766999721527,-0.25905847549438477,0.10379907488822937,-0.024331279098987579,0.45098638534545898, 
  /* [10][0][][] */ -0.62723147869110107,-0.76841318607330322,0.21249325573444366,-0.27438727021217346,-0.063887275755405426,-0.085037790238857269,0.63058650493621826,-0.44204756617546082, -0.88928705453872681,-0.77413791418075562,0.15704649686813354,0.15054899454116821,-0.53232216835021973,-0.114879310131073,-0.1397416889667511,-0.26244810223579407, -0.4490930438041687,-0.10385450720787048,-0.12567679584026337,0.00034880463499575853,-0.32391196489334106,-0.027096591889858246,-0.1842600405216217,0.14969331026077271, 
  /* [11][0][][] */ -0.41652393341064453,0.059808880090713501,-0.41115796566009521,0.46214252710342407,0.042660970240831375,0.35801535844802856,-0.36659854650497437,-0.086071528494358063, -0.17396222054958344,0.0019090345595031977,-0.23071563243865967,-0.039905522018671036,-0.42778441309928894,-0.27696764469146729,-0.18699359893798828,0.047573905438184738, 0.046504288911819458,-0.023521807044744492,-0.23470129072666168,0.17448759078979492,-0.36570680141448975,-0.76871025562286377,-0.17743240296840668,-0.55137002468109131, 
  /* [12][0][][] */ -0.15541036427021027,-0.050226755440235138,-0.65654975175857544,0.34788024425506592,0.26565006375312805,0.18184876441955566,0.21400630474090576,0.37316286563873291, 0.35867857933044434,0.019130174070596695,-0.36437419056892395,-0.36593383550643921,-0.16663426160812378,-0.25792792439460754,-0.049178719520568848,-0.32050526142120361, -0.13817581534385681,-0.019446155056357384,0.010255703702569008,-0.0093527231365442276,-0.13102796673774719,-0.20149761438369751,-0.14959967136383057,-0.51974421739578247, 
  /* [13][0][][] */ -0.023083647713065147,-0.064299449324607849,0.3830963671207428,-0.13974225521087646,-0.11682204157114029,-0.62114959955215454,-0.021946743130683899,-0.19509845972061157, 0.14614662528038025,0.36284306645393372,-0.022802531719207764,-0.32342773675918579,-0.27920860052108765,-1.0951919555664062,-0.49232709407806396,-0.24131849408149719, -0.0079422490671277046,0.116939976811409,0.41058409214019775,-0.11770692467689514,0.12803149223327637,-0.82496523857116699,-0.41585376858711243,-0.038016665726900101, 
  /* [14][0][][] */ 0.79588675498962402,0.040453020483255386,-0.058509021997451782,0.20467798411846161,0.09124455600976944,0.27164393663406372,0.0011652880348265171,-0.35176584124565125, -0.028834741562604904,0.061904363334178925,0.061611790210008621,0.039667807519435883,-0.17732155323028564,-0.115083247423172,-0.33140364289283752,-0.36600062251091003, 0.37247776985168457,-0.093885816633701324,0.11487793177366257,0.046902373433113098,-0.13019327819347382,-0.12729924917221069,-0.48393762111663818,-0.40078005194664001, 
  /* [15][0][][] */ 0.40193787217140198,-0.19269083440303802,-0.14876876771450043,-0.30187055468559265,0.2601960301399231,-0.59805101156234741,0.1721523106098175,0.20863975584506989, 0.068933539092540741,-0.21311686933040619,0.29504171013832092,-0.39178317785263062,-0.033615123480558395,-1.0175848007202148,0.15085670351982117,-0.14406023919582367, -0.070755697786808014,-0.25850984454154968,0.15688690543174744,-0.60130119323730469,-0.65068131685256958,-0.6192665696144104,0.068292975425720215,-0.18160244822502136, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data9[5] = { -0.3482147753238678, -0.11134980618953705, 0.065789841115474701, 0.18322008848190308, 0.11504172533750534, };
const TfArray<1, int> tensor_dimension9 = { 1, { 5 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data10[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data11[5*208] = { 
  0.094282396137714386, -0.48186594247817993, -0.57525068521499634, -0.34906980395317078, -0.0014395408798009157, 0.28681066632270813, 0.11993622034788132, -0.32139122486114502, -0.2451566755771637, -0.11239910870790482, 0.063676349818706512, 0.49342924356460571, 0.029070358723402023, 0.043872654438018799, -0.26325646042823792, -0.38706588745117188, 0.17939874529838562, 0.11347886174917221, -0.1155540868639946, 0.40566110610961914, -0.47348901629447937, -0.01771906204521656, -0.0055786287412047386, 0.29220539331436157, -0.018973898142576218, -0.12472719699144363, -0.48814362287521362, 0.075965471565723419, 0.069943733513355255, 0.032526910305023193, -0.4337669312953949, -0.3110785186290741, 0.0091318115592002869, -0.047213263809680939, 0.15292996168136597, 0.2267533540725708, -0.30615976452827454, 0.097732678055763245, -0.045012842863798141, 0.13666199147701263, 0.18043042719364166, -0.26608428359031677, -0.34474313259124756, 0.15600138902664185, 0.36018601059913635, 0.078155480325222015, 0.20189125835895538, 0.35003620386123657, 0.23088818788528442, -0.36767876148223877, -0.23484879732131958, -0.10093966126441956, 0.080776043236255646, 0.50781279802322388, -0.1494562029838562, -0.32299035787582397, -0.22212138772010803, -0.062599353492259979, 0.46564561128616333, 0.39999765157699585, 0.075825147330760956, 0.090820208191871643, -0.031656756997108459, 0.16309089958667755, 0.39752191305160522, -0.060344722121953964, -0.016113083809614182, 0.15212614834308624, -0.18253400921821594, 0.082983978092670441, -0.31719419360160828, 0.13251098990440369, -0.055613718926906586, -0.15031406283378601, -0.086764179170131683, -0.21293514966964722, -0.27625012397766113, 0.2870388925075531, -0.16518449783325195, 0.011319978162646294, -0.063124045729637146, 0.099524751305580139, -0.18883867561817169, 0.24638935923576355, 0.12296915799379349, 0.25390645861625671, -0.34270763397216797, 0.20475196838378906, 0.077261917293071747, -0.32876455783843994, 0.26785358786582947, -0.18603391945362091, 0.39237582683563232, -0.47008833289146423, -0.3504633903503418, 0.22796405851840973, -0.024530313909053802, -0.21079222857952118, -0.52674329280853271, 0.032428987324237823, 0.060714248567819595, -0.38250568509101868, -0.46884819865226746, -0.0011467037256807089, -0.13159425556659698, -0.098863527178764343, 0.26724138855934143, -0.175308957695961, 0.17223426699638367, -0.5439034104347229, -0.045628011226654053, 0.22727634012699127, 0.068966932594776154, -0.67157965898513794, -0.16919641196727753, 0.038913536816835403, 0.072069406509399414, 0.40925472974777222, -0.45753535628318787, -0.43792444467544556, -0.35101225972175598, -0.12389000505208969, -0.0086289923638105392, -0.063736841082572937, -0.013305672444403172, -0.17790324985980988, -0.41321167349815369, 0.38741475343704224, 0.17443792521953583, 0.18195833265781403, 0.13930328190326691, -0.18274331092834473, 0.30351269245147705, 0.32353922724723816, -0.47866541147232056, -0.10119535773992538, -0.22641700506210327, -0.24679107964038849, 0.48695787787437439, 0.22961395978927612, -0.1509501039981842, -0.40479987859725952, -0.55846786499023438, 0.22223939001560211, -0.24091267585754395, 0.22469379007816315, -0.3215692937374115, 0.15768435597419739, 0.238695427775383, 0.21170061826705933, -0.19156189262866974, 0.25101831555366516, 0.23494735360145569, 0.055734824389219284, 0.32315012812614441, -0.14265139400959015, -0.47061905264854431, -0.44789355993270874, -0.18228788673877716, 0.32646575570106506, -0.68684840202331543, -0.078927472233772278, -0.17879106104373932, -0.38062450289726257, 0.20915897190570831, 0.11931956559419632, -0.36391660571098328, -0.04213341698050499, -0.16552749276161194, -0.056415565311908722, -0.41729035973548889, -0.097289234399795532, -0.0082040922716259956, -0.57225304841995239, 0.15706214308738708, -0.5879131555557251, -0.1762482076883316, -0.19140304625034332, -0.22479149699211121, -0.6508144736289978, -0.28113347291946411, 0.36283904314041138, -0.44422978162765503, -0.52072823047637939, -0.57629209756851196, 0.12032985687255859, -0.50861304998397827, 0.14693993330001831, -0.15383924543857574, -0.14810965955257416, -0.26391100883483887, -0.44283229112625122, 0.36619529128074646, -0.10040818154811859, -0.17986851930618286, -0.49500688910484314, -0.87734222412109375, 0.21729189157485962, -0.13645127415657043, -0.63198691606521606, -1.0328885316848755, -0.35658097267150879, -0.5876011848449707, 0.36738193035125732, 0.19502361118793488, 0.10994494706392288, -0.06188686192035675, -0.74339812994003296, 
  0.34273043274879456, 0.31942042708396912, -0.10305079817771912, 0.2901131808757782, -0.11993882805109024, 0.22638486325740814, 0.15442870557308197, 0.2076457291841507, 0.3552461564540863, 0.10225556790828705, 0.26786777377128601, 0.020654687657952309, -0.14851611852645874, 0.11257621645927429, -0.12936362624168396, -0.10060694813728333, 0.12954501807689667, 0.18992184102535248, -0.02640652097761631, 0.12657256424427032, 0.18748368322849274, 0.19810366630554199, -0.25338461995124817, 0.22046253085136414, 0.50513571500778198, 0.14849694073200226, 0.020593803375959396, 0.24191457033157349, -0.01647295244038105, 0.091008998453617096, 0.027231860905885696, 0.12700323760509491, 0.21614761650562286, -0.036625504493713379, -0.48568382859230042, 0.14560981094837189, 0.052289858460426331, 0.022270699962973595, -0.25237289071083069, 0.12421007454395294, 0.079227007925510406, -0.26166251301765442, -0.03390798345208168, -0.059232816100120544, -0.2473931610584259, 0.24259930849075317, 0.064654290676116943, 0.04486195370554924, -0.14361082017421722, 0.13900232315063477, -0.46592923998832703, 0.17707915604114532, -0.24866551160812378, 0.13296569883823395, -0.27613165974617004, 0.1644187867641449, 0.041909791529178619, 0.18846690654754639, -0.23926971852779388, -0.019631817936897278, -0.54327106475830078, 0.08067716658115387, -0.31064587831497192, -0.019801272079348564, -0.42634618282318115, 0.1464388370513916, -0.08158458024263382, 0.17325079441070557, 0.27363806962966919, -0.064568042755126953, -0.5731160044670105, 0.27330881357192993, 0.23116520047187805, 0.041650343686342239, -0.28543391823768616, 0.010015032254159451, -0.23581486940383911, -0.46738919615745544, -0.54737967252731323, -0.53799974918365479, -0.052285533398389816, -0.059202689677476883, -0.11067214608192444, -0.17894040048122406, 0.17820872366428375, -0.017111893743276596, -0.55025595426559448, 0.071612127125263214, 0.15595477819442749, 0.063999585807323456, -0.24692274630069733, 0.17846627533435822, 0.088588565587997437, -0.088970452547073364, -0.59797638654708862, -0.48420360684394836, 0.010522994212806225, 0.00081900972872972488, -0.26090708374977112, 0.44830590486526489, -0.21003207564353943, 0.32697206735610962, -0.73225164413452148, 0.23118636012077332, 0.070022501051425934, -0.37931263446807861, -0.43650734424591064, 0.54505455493927002, 0.045038532465696335, 0.092790178954601288, -0.17139409482479095, -0.12084464728832245, 0.087243884801864624, 0.27869167923927307, -0.36207154393196106, 0.51694107055664062, -0.41227051615715027, 0.030399419367313385, 0.035804059356451035, 0.41800600290298462, 0.28403949737548828, -0.40399286150932312, 0.065696269273757935, -0.035019446164369583, -0.152640700340271, -0.0042437976226210594, -0.14696277678012848, 0.0023359351325780153, 0.056431196630001068, -0.35104572772979736, -0.28794151544570923, 0.37066406011581421, -0.41611862182617188, -0.016444696113467216, -0.40014883875846863, 0.25864353775978088, 0.063737586140632629, -0.7386365532875061, -0.31074026226997375, 0.067635312676429749, 0.080254949629306793, 0.24737608432769775, -0.25639662146568298, -0.36517870426177979, 0.11984159052371979, -0.33516925573348999, -0.42463353276252747, -0.17636531591415405, -0.48036313056945801, 0.1108936071395874, -0.30859723687171936, 0.31627058982849121, -0.38626331090927124, -0.73036903142929077, -0.53308886289596558, 0.18154892325401306, -0.10420295596122742, 0.034512225538492203, -0.27160543203353882, -0.36909621953964233, 0.35904821753501892, -0.48090282082557678, -0.40129810571670532, -0.74697166681289673, -0.37474146485328674, 0.092126905918121338, -0.15666432678699493, -0.40044927597045898, -0.31537953019142151, -0.59798681735992432, -0.61825132369995117, 0.19366860389709473, 0.074015684425830841, 0.066070780158042908, -0.36998558044433594, -0.54848384857177734, 0.11701709777116776, -0.47140482068061829, -0.46217519044876099, -0.28981339931488037, -0.59285646677017212, 0.025430625304579735, 0.073772333562374115, -0.14875423908233643, -0.34264788031578064, -0.85158854722976685, -0.96474665403366089, 0.037855777889490128, -0.35791507363319397, 0.10062623769044876, -0.17520518600940704, -0.028349976986646652, -0.18258363008499146, 0.057957466691732407, -0.43423545360565186, -0.16732792556285858, -0.60147017240524292, 0.082505375146865845, -0.015706922858953476, -0.077248707413673401, -0.45048663020133972, -0.1836513876914978, -0.81488311290740967, -0.070550501346588135, -0.95033210515975952, -0.052266284823417664, -0.34373441338539124, -0.54990488290786743, 
  -0.054722283035516739, 0.12160599231719971, -0.10982848703861237, 0.38500630855560303, -0.06718561053276062, 0.04170568659901619, -0.012897985987365246, 0.28799387812614441, 0.12090406566858292, 0.052309673279523849, 0.057108469307422638, -0.015775389969348907, 0.013251790776848793, 0.14996305108070374, 0.059042122215032578, 0.18506905436515808, 0.22165375947952271, 0.086572505533695221, -0.060032926499843597, 0.14335544407367706, 0.19385547935962677, -0.034045960754156113, -0.08451119065284729, 0.23639842867851257, 0.021126009523868561, 0.07856413722038269, 0.34577146172523499, -0.072847075760364532, 0.01782357320189476, -0.002357276389375329, 0.22192180156707764, 0.20515841245651245, 0.24184197187423706, 0.082036711275577545, 0.11822829395532608, -0.14047007262706757, 0.27053701877593994, -0.25011554360389709, 0.093645989894866943, 0.039184149354696274, 0.097631581127643585, 0.20547865331172943, 0.53625285625457764, -0.092624269425868988, -0.030476432293653488, 0.32146704196929932, 0.055397197604179382, -0.019439602270722389, 0.079943045973777771, 0.05721031129360199, 0.28930705785751343, -0.076314426958560944, 0.36413830518722534, -0.32770773768424988, 0.049436893314123154, 0.02841218002140522, 0.20912224054336548, 0.034146148711442947, 0.06922130286693573, 0.017305318266153336, -0.17073002457618713, 0.011907345615327358, -0.039503764361143112, -0.064527973532676697, 0.19659988582134247, 0.12826542556285858, 0.12334668636322021, 0.026825184002518654, 0.13141588866710663, -0.069430053234100342, 0.23139706254005432, -0.029218437150120735, 0.082563787698745728, 0.022910524159669876, 0.16172859072685242, 0.0064323125407099724, -0.089932918548583984, 0.091066785156726837, -0.0051682931371033192, -0.050394587218761444, 0.17549407482147217, -0.057165954262018204, 0.14018695056438446, -0.132908895611763, 0.21056924760341644, 0.060869451612234116, 0.02047271654009819, -0.069028206169605255, 0.13642182946205139, 0.090360626578330994, 0.15927241742610931, 0.055695582181215286, -0.092099867761135101, 0.1993277370929718, 0.12771284580230713, -0.028321966528892517, 0.14471551775932312, 0.027898475527763367, 0.12316882610321045, -0.070007488131523132, 0.025536423549056053, -0.2223082035779953, 0.096334353089332581, -0.20769228041172028, -0.13510459661483765, 0.13710072636604309, -0.054560188204050064, 0.048010736703872681, -0.15557359158992767, 0.28345134854316711, -0.0017793654697015882, 0.16360819339752197, 0.088192299008369446, -0.040861167013645172, 0.23531655967235565, -0.23834775388240814, 0.081878066062927246, -0.28559058904647827, -0.13465526700019836, 0.0063509563915431499, -0.15321561694145203, 0.11653341352939606, 0.233856201171875, -0.31798109412193298, -0.14636656641960144, 0.0056788199581205845, 0.071009635925292969, -0.025632521137595177, 0.052409335970878601, 0.065863154828548431, 0.036217797547578812, -0.10080089420080185, 0.1698596179485321, -0.21912708878517151, -0.19597849249839783, 0.11312957108020782, -0.063563317060470581, -0.00021035526879131794, -0.012744625099003315, -0.50599437952041626, -0.089007511734962463, 0.36845403909683228, 0.051862236112356186, 0.1973281055688858, 0.24925325810909271, -0.0037938111927360296, 0.13444137573242188, -0.21063698828220367, 0.25199919939041138, -0.25663730502128601, 0.14526346325874329, -0.022055940702557564, -0.18773715198040009, 0.14158734679222107, 0.12513270974159241, -0.23273807764053345, -0.17733240127563477, 0.20588850975036621, 0.14086659252643585, 0.34455820918083191, 0.24010831117630005, -0.075129866600036621, 0.1094050332903862, 0.15525151789188385, 0.24491186439990997, -0.32781228423118591, -0.089934572577476501, -0.13936743140220642, -0.05660020187497139, 0.010865494608879089, 0.21574994921684265, -0.49206346273422241, -0.21165768802165985, 0.29019564390182495, 0.064323864877223969, 0.25391790270805359, 0.074339687824249268, 0.14484083652496338, -0.070420399308204651, 0.12602183222770691, 0.28649383783340454, -0.30310285091400146, 0.01321959774941206, 0.090095497667789459, -0.027384789660573006, 0.094064772129058838, 0.42280107736587524, -0.19071762263774872, -0.10563331842422485, 0.13911141455173492, 0.22690072655677795, 0.23989982903003693, 0.15913045406341553, -0.003763856366276741, 0.30258017778396606, 0.039742834866046906, 0.63350522518157959, -0.18888096511363983, -0.18099382519721985, 0.18776464462280273, 0.037185918539762497, 0.053915798664093018, 0.31332969665527344, 0.0026078971568495035, 0.22111110389232635, 0.20618385076522827, 0.26797845959663391, 0.27867302298545837, 
  -0.42303410172462463, 0.18420317769050598, 0.14016258716583252, -0.16595497727394104, -0.21573558449745178, -0.73385661840438843, 0.052175015211105347, -0.34497955441474915, -0.0955066978931427, 0.20838865637779236, -0.47955325245857239, -0.17157892882823944, 0.25516387820243835, -0.28562688827514648, 0.1501002162694931, 0.19504992663860321, -0.52790993452072144, -0.23080027103424072, 0.11529749631881714, -0.47200918197631836, -0.26346656680107117, -0.27636495232582092, 0.12635084986686707, -0.4987780749797821, -0.35963785648345947, 0.077332004904747009, -0.17452418804168701, -0.053883880376815796, 0.0053155086934566498, -0.27826252579689026, 0.093279384076595306, -0.28673547506332397, -0.8574974536895752, -0.1803000420331955, 0.19268868863582611, -0.92495721578598022, -0.27681955695152283, -0.52800142765045166, 0.22478805482387543, -0.71003121137619019, -0.087428145110607147, 0.25752738118171692, -0.41243419051170349, 0.10340515524148941, -0.0034012417308986187, -0.62074923515319824, 0.2762874960899353, -0.69899821281433105, -0.59685426950454712, -0.037117835134267807, -0.045220959931612015, -0.08489517867565155, -0.32112497091293335, -0.2507375180721283, 0.13218215107917786, -0.15752579271793365, -0.32561814785003662, -0.019498143345117569, -0.60773384571075439, 0.11365280300378799, 0.20692858099937439, 0.14863862097263336, 0.16838540136814117, -0.20774291455745697, -0.10680806636810303, -0.020385615527629852, 0.093304626643657684, -0.35630813241004944, -0.13974982500076294, -0.31031930446624756, 0.16309019923210144, -0.18875829875469208, -0.11005093902349472, 0.084311380982398987, -0.25280624628067017, 0.25490736961364746, -0.10799528658390045, -0.45554381608963013, -0.020915837958455086, -0.1268877387046814, -0.052083313465118408, -0.077723421156406403, 0.0067795747891068459, -0.49727973341941833, -0.092794172465801239, -0.11058557033538818, 0.13052335381507874, -0.21610122919082642, -0.099546767771244049, 0.0036116256378591061, 0.10220248252153397, 0.034536857157945633, 0.18762999773025513, -0.17961908876895905, 0.081381529569625854, -0.44376689195632935, 0.12077172100543976, 0.19798591732978821, 0.13526587188243866, -0.015650808811187744, 0.059702262282371521, -0.38353651762008667, 0.4130902886390686, -0.16710157692432404, 0.13694247603416443, 0.28858640789985657, 0.018795572221279144, -0.084786713123321533, -0.10646199434995651, -0.10706902295351028, 0.24840241670608521, 0.15954546630382538, -0.48766449093818665, 0.26745063066482544, 0.052277710288763046, 0.25718900561332703, -0.046783365309238434, -0.8390125036239624, 0.45379683375358582, 0.039071250706911087, 0.075592085719108582, 0.35477116703987122, -0.2037212997674942, 0.55156159400939941, -0.11060973256826401, -0.13781753182411194, 0.26322716474533081, -0.32715490460395813, -0.48891699314117432, 0.14430423080921173, 0.10484262555837631, 0.055723376572132111, 0.046911552548408508, -0.80605018138885498, 0.2840304970741272, 0.079235561192035675, 0.13687847554683685, 0.24404649436473846, -0.1906997412443161, 0.88047176599502563, -0.02761797234416008, -0.14928229153156281, 0.11459100991487503, -0.3300667405128479, -0.3911764919757843, 0.11862164735794067, 0.23127813637256622, 0.081258073449134827, -0.10949144512414932, -0.41154655814170837, 0.43825438618659973, 0.065511070191860199, 0.15325947105884552, 0.098253615200519562, -0.28263339400291443, 0.51357787847518921, 0.61070054769515991, -0.27175092697143555, 0.23811112344264984, -0.06940130889415741, -0.14308148622512817, 0.080888271331787109, 0.13998676836490631, 0.20180502533912659, 0.054169155657291412, -0.20509828627109528, 0.35006600618362427, -0.19125545024871826, 0.22258029878139496, 0.17746196687221527, -0.22781848907470703, 0.24575139582157135, 0.32790088653564453, -0.25272068381309509, 0.18139295279979706, 0.061280440539121628, -0.38373765349388123, 0.27559173107147217, -0.048772316426038742, 0.27573966979980469, 0.11674930900335312, -0.47103390097618103, 0.43273451924324036, 0.10020363330841064, 0.22317247092723846, 0.21264587342739105, -0.070068128407001495, 0.41758707165718079, 0.011965141631662846, -0.45953077077865601, 0.11227114498615265, 0.24147678911685944, -0.49533760547637939, 0.13532409071922302, 0.069358564913272858, 0.28751066327095032, 0.19307449460029602, -0.40931373834609985, -0.017054479569196701, 0.26518270373344421, 0.39182427525520325, 0.27867776155471802, 0.15522508323192596, -0.21496672928333282, -0.15506668388843536, -0.59057164192199707, 0.2113879919052124, 0.26198089122772217, 
  0.17402774095535278, -0.41970318555831909, 0.20436757802963257, -0.70202451944351196, -0.23192785680294037, 0.27018848061561584, -0.064802981913089752, -0.41554760932922363, -0.20845326781272888, -0.19574525952339172, -0.05547700822353363, 0.0026679676957428455, 0.13945072889328003, 0.24136807024478912, -0.42412033677101135, 0.16039478778839111, -0.10092676430940628, -0.51775276660919189, 0.011891718953847885, -0.59124821424484253, -0.10476898401975632, 0.25063055753707886, -0.19375687837600708, -0.41409528255462646, -0.95584213733673096, -0.65438127517700195, 0.18439903855323792, -0.044479649513959885, -0.22164610028266907, 0.090284615755081177, -0.52273762226104736, 0.026246270164847374, -0.11454103887081146, 0.097265675663948059, -0.0019681483972817659, 0.016280440613627434, 0.26560640335083008, 0.074465595185756683, 0.16644518077373505, 0.20848575234413147, -0.19598302245140076, 0.078326418995857239, -0.22774292528629303, -0.34212207794189453, -0.50719106197357178, 0.013710033148527145, -0.17800866067409515, -0.40615081787109375, -0.09788147360086441, 0.31870472431182861, 0.21985457837581635, -0.016296442598104477, -0.087462581694126129, 0.37045982480049133, -0.32973453402519226, 0.18270491063594818, 0.27223753929138184, -0.24794907867908478, 0.044211819767951965, 0.092880450189113617, 0.18728415668010712, -0.22357194125652313, 0.21593905985355377, -0.36641135811805725, -0.47804772853851318, -0.46846258640289307, -0.020389778539538383, 0.017769230529665947, -0.47540169954299927, 0.33765533566474915, 0.15437935292720795, 0.10916082561016083, 0.010319186374545097, -0.39436653256416321, -0.14316506683826447, -0.31200352311134338, 0.26485607028007507, 0.24294266104698181, 0.46732327342033386, 0.27829128503799438, -0.056705165654420853, -0.055167380720376968, -0.2063269168138504, 0.1445481926202774, -0.34692063927650452, -0.07655392587184906, 0.088006079196929932, 0.096233032643795013, 0.15794980525970459, 0.049651782959699631, -0.3565935492515564, -0.85000056028366089, -0.2853979766368866, 0.37356117367744446, 0.3104674220085144, 0.33067482709884644, -0.15796597301959991, 0.041970659047365189, 0.36023354530334473, -0.21925956010818481, -0.2602497935295105, 0.40405270457267761, 0.20363509654998779, 0.22566317021846771, -0.017729029059410095, -0.055988535284996033, -0.0028220289386808872, 0.16429299116134644, 0.0069830860011279583, 0.16177268326282501, -0.076872415840625763, -0.68125206232070923, -0.33454397320747375, 0.10789496451616287, 0.25259527564048767, -0.14938965439796448, -0.34117498993873596, 0.38898929953575134, -0.021064708009362221, 0.25262406468391418, 0.079101860523223877, -0.13943532109260559, -0.076796330511569977, -0.015757562592625618, 0.29248356819152832, -0.07793833315372467, 0.25564360618591309, -0.23279112577438354, -0.2573697566986084, -0.20831310749053955, 0.23648378252983093, -0.29048269987106323, -0.28515595197677612, 0.39123740792274475, 0.15891122817993164, -0.43865898251533508, 0.31698229908943176, 0.17009907960891724, -0.31560477614402771, -0.14593113958835602, 0.15005595982074738, 0.080667808651924133, 0.24154208600521088, 0.065375640988349915, 0.0074061518535017967, -0.30784216523170471, 0.43707984685897827, 0.11498519778251648, -0.280517578125, 0.1850699782371521, 0.051825441420078278, -0.067600920796394348, -0.51642072200775146, 0.088320441544055939, -0.59402728080749512, -0.36760273575782776, -0.3922501802444458, 0.26289823651313782, -0.15493504703044891, 0.048333000391721725, 0.086824767291545868, -0.12456131726503372, 0.32643580436706543, -0.60956871509552002, -0.27116307616233826, 0.17160151898860931, -0.18597753345966339, 0.22219544649124146, -0.48282709717750549, -0.093520812690258026, 0.41639542579650879, -0.13039326667785645, -0.3909142017364502, 0.18803530931472778, -0.18128348886966705, -0.26153770089149475, -0.19221377372741699, 0.10417325794696808, 0.17023694515228271, -0.73289698362350464, -0.32622304558753967, 0.26208138465881348, -0.43226322531700134, 0.25843611359596252, -0.01237725093960762, -0.11224371939897537, -0.10767844319343567, -0.011108031496405602, 0.18440729379653931, -0.010326462797820568, -0.44488570094108582, -0.27861747145652771, 0.28235775232315063, -0.020593097433447838, 0.18182052671909332, -0.29813534021377563, -1.3433383703231812, 0.29142662882804871, 0.092024378478527069, -0.10259318351745605, 0.044114507734775543, -0.12019404023885727, -0.70477312803268433, 0.13644950091838837, 0.045996498316526413, 0.14321056008338928, -0.11317706108093262, -0.38022211194038391, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 5,208 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,49,13 } };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,49,8 } };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,49,1,8 } };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,5 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,3 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,7,1 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,4 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,5 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,2 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,6 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,10 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,11,9 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 2560), (TfLiteIntArray*)&g0::tensor_dimension0, 2548, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 64, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1248, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 1536, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 20, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 8, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 4160, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 2548, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 2560), (TfLiteIntArray*)&g0::tensor_dimension13, 1568, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1568, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1568), (TfLiteIntArray*)&g0::tensor_dimension15, 800, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 800, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension17, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension19, 832, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 832, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension21, 20, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension21, 20, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_798375_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_798375_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_798375_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_798375_3_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_798375_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
